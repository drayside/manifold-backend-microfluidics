( set-logic QF_NRA )
( declare-fun PI ( ) Real )
( declare-fun channel0_max_droplets ( ) Real )
( declare-fun channel0_droplet_resistance ( ) Real )
( declare-fun channel0_resistance ( ) Real )
( declare-fun channel0_width ( ) Real )
( declare-fun channel0_height ( ) Real )
( declare-fun channel0_viscosity ( ) Real )
( declare-fun channel0_length ( ) Real )
( declare-fun out0_pos_x ( ) Real )
( declare-fun out0_pos_y ( ) Real )
( declare-fun out0_input_pressure ( ) Real )
( declare-fun in0_pos_x ( ) Real )
( declare-fun in0_pos_y ( ) Real )
( declare-fun in0_output_pressure ( ) Real )
( declare-fun channel0_flowrate ( ) Real )
( assert ( = PI 3.141592653589793 ) )
( assert ( > out0_pos_x 0.0 ) )
( assert ( > out0_pos_y 0.0 ) )
( assert ( < out0_pos_x 0.04 ) )
( assert ( < out0_pos_y 0.04 ) )
( assert ( > in0_pos_x 0.0 ) )
( assert ( > in0_pos_y 0.0 ) )
( assert ( < in0_pos_x 0.04 ) )
( assert ( < in0_pos_y 0.04 ) )
( assert ( = ( + ( ^ ( - in0_pos_x out0_pos_x ) 2 ) ( ^ ( - in0_pos_y out0_pos_y ) 2 ) ) ( ^ channel0_length 2 ) ) )
( assert ( >= channel0_length 1.0E-4 ) )
( assert ( > channel0_resistance 0.0 ) )
( assert ( > channel0_width 0.0 ) )
( assert ( > channel0_height 0.0 ) )
( assert ( > channel0_viscosity 0.0 ) )
( assert ( > channel0_length 0.0 ) )
( assert ( = channel0_resistance ( / ( * 12.0 ( * channel0_viscosity channel0_length ) ) ( * channel0_width ( * ( ^ channel0_height 3.0 ) ( - 1.0 ( * 0.63 ( / channel0_height channel0_width ) ) ) ) ) ) ) )
( assert ( < channel0_height channel0_width ) )
( assert ( <= 0 out0_input_pressure ) )
( assert ( <= 0 in0_output_pressure ) )
( assert ( = channel0_viscosity 0.001002 ) )
( assert ( = ( - in0_output_pressure out0_input_pressure ) ( * channel0_flowrate channel0_resistance ) ) )
( check-sat )
( exit )
