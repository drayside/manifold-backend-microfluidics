( set-logic QF_NRA )
( declare-fun PI ( ) Real )
( declare-fun junction0.pos_x ( ) Real )
( declare-fun junction0.pos_y ( ) Real )
( declare-fun junction0.epsilon ( ) Real )
( declare-fun junction0.pressure ( ) Real )
( declare-fun junction0.continuous.pressure ( ) Real )
( declare-fun junction0.dispersed.pressure ( ) Real )
( declare-fun junction0.output.pressure ( ) Real )
( declare-fun channelE.droplet_volume ( ) Real )
( declare-fun channelC.max_droplets ( ) Real )
( declare-fun channelC.droplet_resistance ( ) Real )
( declare-fun channelC.resistance ( ) Real )
( declare-fun channelC.width ( ) Real )
( declare-fun channelC.height ( ) Real )
( declare-fun channelC.viscosity ( ) Real )
( declare-fun channelC.length ( ) Real )
( declare-fun channelD.max_droplets ( ) Real )
( declare-fun channelD.droplet_resistance ( ) Real )
( declare-fun channelD.resistance ( ) Real )
( declare-fun channelD.width ( ) Real )
( declare-fun channelD.height ( ) Real )
( declare-fun channelD.viscosity ( ) Real )
( declare-fun channelD.length ( ) Real )
( declare-fun channelE.max_droplets ( ) Real )
( declare-fun channelE.droplet_resistance ( ) Real )
( declare-fun channelE.resistance ( ) Real )
( declare-fun channelE.width ( ) Real )
( declare-fun channelE.height ( ) Real )
( declare-fun channelE.viscosity ( ) Real )
( declare-fun channelE.length ( ) Real )
( declare-fun out0.pos_x ( ) Real )
( declare-fun out0.pos_y ( ) Real )
( declare-fun out0.input.pressure ( ) Real )
( declare-fun in0.pos_x ( ) Real )
( declare-fun in0.pos_y ( ) Real )
( declare-fun in0.output.pressure ( ) Real )
( declare-fun in1.pos_x ( ) Real )
( declare-fun in1.pos_y ( ) Real )
( declare-fun in1.output.pressure ( ) Real )
( declare-fun channelC.flowrate ( ) Real )
( declare-fun channelD.flowrate ( ) Real )
( declare-fun channelE.flowrate ( ) Real )
( assert ( = PI 3.141592653589793 ) )
( assert ( > out0.pos_x 0.0 ) )
( assert ( > out0.pos_y 0.0 ) )
( assert ( < out0.pos_x 0.1 ) )
( assert ( < out0.pos_y 0.1 ) )
( assert ( > in0.pos_x 0.0 ) )
( assert ( > in0.pos_y 0.0 ) )
( assert ( < in0.pos_x 0.1 ) )
( assert ( < in0.pos_y 0.1 ) )
( assert ( > junction0.pos_x 0.0 ) )
( assert ( > junction0.pos_y 0.0 ) )
( assert ( < junction0.pos_x 0.1 ) )
( assert ( < junction0.pos_y 0.1 ) )
( assert ( > in1.pos_x 0.0 ) )
( assert ( > in1.pos_y 0.0 ) )
( assert ( < in1.pos_x 0.1 ) )
( assert ( < in1.pos_y 0.1 ) )
( assert ( <= 0.9924038765060548 ( / ( ^ ( + ( * ( - out0.pos_x junction0.pos_x ) ( - in1.pos_x junction0.pos_x ) ) ( * ( - out0.pos_y junction0.pos_y ) ( - in1.pos_y junction0.pos_y ) ) ) 2.0 ) ( * ( + ( * ( - out0.pos_x junction0.pos_x ) ( - out0.pos_x junction0.pos_x ) ) ( * ( - out0.pos_y junction0.pos_y ) ( - out0.pos_y junction0.pos_y ) ) ) ( + ( * ( - in1.pos_x junction0.pos_x ) ( - in1.pos_x junction0.pos_x ) ) ( * ( - in1.pos_y junction0.pos_y ) ( - in1.pos_y junction0.pos_y ) ) ) ) ) ) )
( assert ( <= 0.9924038765060548 ( / ( ^ ( + ( * ( - in0.pos_x junction0.pos_x ) ( - in1.pos_x junction0.pos_x ) ) ( * ( - in0.pos_y junction0.pos_y ) ( - in1.pos_y junction0.pos_y ) ) ) 2.0 ) ( * ( + ( * ( - in0.pos_x junction0.pos_x ) ( - in0.pos_x junction0.pos_x ) ) ( * ( - in0.pos_y junction0.pos_y ) ( - in0.pos_y junction0.pos_y ) ) ) ( + ( * ( - in1.pos_x junction0.pos_x ) ( - in1.pos_x junction0.pos_x ) ) ( * ( - in1.pos_y junction0.pos_y ) ( - in1.pos_y junction0.pos_y ) ) ) ) ) ) )
( assert ( = ( + ( ^ ( - in0.pos_x junction0.pos_x ) 2 ) ( ^ ( - in0.pos_y junction0.pos_y ) 2 ) ) ( ^ channelC.length 2 ) ) )
( assert ( = ( + ( ^ ( - junction0.pos_x out0.pos_x ) 2 ) ( ^ ( - junction0.pos_y out0.pos_y ) 2 ) ) ( ^ channelE.length 2 ) ) )
( assert ( = ( + ( ^ ( - in1.pos_x junction0.pos_x ) 2 ) ( ^ ( - in1.pos_y junction0.pos_y ) 2 ) ) ( ^ channelD.length 2 ) ) )
( assert ( >= channelC.length 1.0E-4 ) )
( assert ( >= channelD.length 1.0E-4 ) )
( assert ( >= channelE.length 1.0E-4 ) )
( assert ( > channelC.flowrate 0 ) )
( assert ( > channelD.flowrate 0 ) )
( assert ( > channelE.flowrate 0 ) )
( assert ( = channelC.width channelE.width ) )
( assert ( = channelC.height channelD.height ) )
( assert ( = channelC.height channelE.height ) )
( assert ( >= junction0.epsilon 0 ) )
( assert ( = junction0.pressure junction0.continuous.pressure ) )
( assert ( = junction0.pressure junction0.dispersed.pressure ) )
( assert ( = junction0.pressure junction0.output.pressure ) )
( assert ( = ( + channelC.flowrate channelD.flowrate ) ( + channelE.flowrate ) ) )
( assert ( = ( + channelC.flowrate_worst_case channelD.flowrate_worst_case ) ( + channelE.flowrate_worst_case ) ) )
( assert ( = channelC.viscosity channelE.viscosity ) )
( assert ( = channelE.droplet_volume ( * ( * channelC.height ( * channelC.width channelC.width ) ) ( + ( - ( * 0.375 PI ) ( * ( * ( / PI 2 ) ( - 1 ( / PI 4 ) ) ) ( / channelC.height channelC.width ) ) ) ( * ( * ( - 1 ( / PI 4 ) ) ( * ( ^ ( - 1 0.1 ) -1 ) ( + ( - ( ^ ( / ( + channelC.width ( + ( - channelD.width ( - ( / ( * channelC.height channelC.width ) ( + channelC.height channelC.width ) ) junction0.epsilon ) ) ( ^ ( * 2 ( * ( - channelD.width ( / ( * channelC.height channelC.width ) ( + channelC.height channelC.width ) ) ) ( - channelC.width ( / ( * channelC.height channelC.width ) ( + channelC.height channelC.width ) ) ) ) ) 0.5 ) ) ) channelC.width ) 2 ) ( ^ ( / channelC.width channelC.width ) 2 ) ) ( * ( / PI 4 ) ( * ( - ( / ( + channelC.width ( + ( - channelD.width ( - ( / ( * channelC.height channelC.width ) ( + channelC.height channelC.width ) ) junction0.epsilon ) ) ( ^ ( * 2 ( * ( - channelD.width ( / ( * channelC.height channelC.width ) ( + channelC.height channelC.width ) ) ) ( - channelC.width ( / ( * channelC.height channelC.width ) ( + channelC.height channelC.width ) ) ) ) ) 0.5 ) ) ) channelC.width ) ( / channelC.width channelC.width ) ) ( / channelC.height channelC.width ) ) ) ) ) ) ( / channelD.flowrate channelC.flowrate ) ) ) ) ) )
( assert ( > channelC.resistance 0.0 ) )
( assert ( > channelC.width 0.0 ) )
( assert ( > channelC.height 0.0 ) )
( assert ( > channelC.viscosity 0.0 ) )
( assert ( > channelC.length 0.0 ) )
( assert ( = channelC.resistance ( / ( * 12.0 ( * channelC.viscosity channelC.length ) ) ( * channelC.width ( * ( ^ channelC.height 3.0 ) ( - 1.0 ( * 0.63 ( / channelC.height channelC.width ) ) ) ) ) ) ) )
( assert ( < channelC.height channelC.width ) )
( assert ( > channelD.resistance 0.0 ) )
( assert ( > channelD.width 0.0 ) )
( assert ( > channelD.height 0.0 ) )
( assert ( > channelD.viscosity 0.0 ) )
( assert ( > channelD.length 0.0 ) )
( assert ( = channelD.resistance ( / ( * 12.0 ( * channelD.viscosity channelD.length ) ) ( * channelD.width ( * ( ^ channelD.height 3.0 ) ( - 1.0 ( * 0.63 ( / channelD.height channelD.width ) ) ) ) ) ) ) )
( assert ( < channelD.height channelD.width ) )
( assert ( > channelE.resistance 0.0 ) )
( assert ( > channelE.width 0.0 ) )
( assert ( > channelE.height 0.0 ) )
( assert ( > channelE.viscosity 0.0 ) )
( assert ( > channelE.length 0.0 ) )
( assert ( = channelE.resistance ( / ( * 12.0 ( * channelE.viscosity channelE.length ) ) ( * channelE.width ( * ( ^ channelE.height 3.0 ) ( - 1.0 ( * 0.63 ( / channelE.height channelE.width ) ) ) ) ) ) ) )
( assert ( < channelE.height channelE.width ) )
( assert ( <= 0 out0.input.pressure ) )
( assert ( <= 0 in0.output.pressure ) )
( assert ( = channelC.viscosity 0.01 ) )
( assert ( <= 0 in1.output.pressure ) )
( assert ( = channelD.viscosity 0.001 ) )
( assert ( = ( - in0.output.pressure junction0.continuous.pressure ) ( * channelC.flowrate channelC.resistance ) ) )
( assert ( = ( - in1.output.pressure junction0.dispersed.pressure ) ( * channelD.flowrate channelD.resistance ) ) )
( assert ( = ( - junction0.output.pressure out0.input.pressure ) ( * channelE.flowrate channelE.resistance ) ) )
( check-sat )
( exit )
