( set-logic QF_NRA )
( declare-fun PI ( ) Real )
( declare-fun channel0_max_droplets ( ) Real )
( declare-fun channel0_droplet_resistance ( ) Real )
( declare-fun channel0_resistance ( ) Real )
( declare-fun channel0_radius ( ) Real )
( declare-fun channel0_length ( ) Real )
( declare-fun out0_pos_x ( ) Real )
( declare-fun out0_pos_y ( ) Real )
( declare-fun out0_input_pressure ( ) Real )
( declare-fun in0_pos_x ( ) Real )
( declare-fun in0_pos_y ( ) Real )
( declare-fun in0_output_pressure ( ) Real )
( declare-fun channel0_viscosity ( ) Real )
( declare-fun channel0_flowrate ( ) Real )
( declare-fun channel0_velocity ( ) Real )
( assert ( = PI 3.141592653589793 ) )
( assert ( = in0_output_pressure 94.0))
( assert ( = out0_input_pressure 7899.0))
( assert ( >= channel0_flowrate 0))
( assert ( > out0_pos_x 0.0 ) )
( assert ( > out0_pos_y 0.0 ) )
( assert ( < out0_pos_x 0.04 ) )
( assert ( < out0_pos_y 0.04 ) )
( assert ( > in0_pos_x 0.0 ) )
( assert ( > in0_pos_y 0.0 ) )
( assert ( < in0_pos_x 0.04 ) )
( assert ( < in0_pos_y 0.04 ) )
( assert ( = ( + ( ^ ( - in0_pos_x out0_pos_x ) 2 ) ( ^ ( - in0_pos_y out0_pos_y ) 2 ) ) ( ^ channel0_length 2 ) ) )
( assert ( > channel0_resistance 0.0 ) )
( assert ( > channel0_viscosity 0.0 ) )
( assert ( > channel0_length 0.0 ) )
( assert ( = channel0_length 2.0E-5 ) )
( assert ( = channel0_radius 1.0E-6 ) )
( assert ( = channel0_resistance ( / ( * 8.0 ( * channel0_viscosity channel0_length ) ) ( * 3.141592653589793 ( ^ channel0_radius 4.0 ) ) ) ) )
( assert (= channel0_velocity (/ channel0_flowrate (* PI (^ channel0_radius 2)))))
( assert ( = channel0_viscosity 0.001002 ) )
( assert ( = ( - out0_input_pressure in0_output_pressure ) ( * channel0_flowrate channel0_resistance ) ) )
( assert ( >= channel0_length 1.0E-6 ) )
( assert ( > channel0_radius 0.0 ) )
( check-sat )
( exit )
